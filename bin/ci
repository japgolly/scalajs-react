#!/bin/bash
set -euo pipefail
cd "$(dirname "$0")/../library"

if [ $# -gt 1 ]; then
  echo "Usage: $0 [<scala ver>]"
  echo ""
  echo "Where"
  echo "  <scala ver> = 2 or 3"
  echo
  exit 1
fi

case "${1:-}" in
  "")
    "$0" 2
    echo
    echo
    "$0" 3
    exit 0
    ;;
  2|3)
    SCALA_VER="$(../bin/get_scala_version $1)"
    echo "Scala version: $SCALA_VER"
    ;;
  *)
    echo "Unrecognised version: $1" >&2
    exit 2
    ;;
esac

dryrun=
# dryrun=-n

# See how much memory is available
if [ "$(uname)" == "Darwin" ]; then # https://apple.stackexchange.com/a/94258
  vm_stat | perl -ne '/page size of (\d+)/ and $size=$1; /Pages\s+([^:]+)[^\d]+(\d+)/ and printf("%-16s % 16.2f Mi\n", "$1:", $2 * $size / 1048576);'
elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
  free -h
fi
echo

# Test upstream
rm -rf */target/scala-*/{,test-}classes
cmd=(
  sbt
    -J-Xmx3G
    -J-XX:+UseG1GC
    ++$SCALA_VER
    'set ThisBuild / parallelExecution := false'
    'set Global / concurrentRestrictions += Tags.limit(ScalaJSTags.Link, 1)'
    clean
    test                                                # Test development-mode
    'set ThisBuild / scalaJSStage := FullOptStage' test # Test production-mode
    publishLocal                                        # For downstream tests
)
echo "> $(printf "%s\n    " "${cmd[@]}")"
[[ $dryrun == "-n" ]] || "${cmd[@]}"

# Test downstream
SCALA_MAJOR_VER="${SCALA_VER:0:1}"
../downstream-tests/run -$SCALA_MAJOR_VER $dryrun
